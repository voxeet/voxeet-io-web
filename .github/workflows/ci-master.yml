name: CI build master

on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 2 * * *'
jobs:

  build_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: rlespinasse/github-slug-action@v3.x
      - name: build and publish auth server Docker container
        uses: elgohr/Publish-Docker-Github-Action@2.22
        with:
          name: voxeet/voxeet-io-web-auth
          dockerfile: Dockerfile
          workdir: backend
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          buildoptions: "--pull"
          tags: "${{ env.GITHUB_REF_SLUG }}"

  build_frontend_master_production_docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: rlespinasse/github-slug-action@v3.x
      - name: build and publish frontend Docker container for master - production Web SDK
        uses: elgohr/Publish-Docker-Github-Action@2.22
        with:
          name: voxeet/voxeet-io-web
          dockerfile: Dockerfile
          workdir: frontend
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          buildoptions: "--pull"
          tags: "${{ env.GITHUB_REF_SLUG }}"
  build_frontend_master_production:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    env:
      CLOUDFRONT_DESTINATION_PATH: "master"
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VOXEET_AWS_REGION }}
      - name: Set NPM token when logging to CodeArtifact
        run: |
          CODEARTIFACT_TOKEN=$(/usr/local/bin/aws codeartifact get-authorization-token --duration-seconds 1800 --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_DOMAIN_OWNER }} --region ${{ secrets.AWS_REGION }} --output text --query authorizationToken)
          echo "::add-mask::$CODEARTIFACT_TOKEN"
          echo "CUSTOM_REGISTRY_TOKEN=${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_TOKEN }}$CODEARTIFACT_TOKEN" >> $GITHUB_ENV
      - name: build frontend for  master - production Web SDK
        uses: actions/setup-node@v2
        env:
          CUSTOM_REGISTRY_URL: ${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_URL }}
        with:
          node-version: "16.9.1"
      - run: |
          npm config set registry=${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_URL }}
          npm config set $CUSTOM_REGISTRY_TOKEN
          npm config set always-auth true
          yarn add -E @voxeet/voxeet-web-sdk@${{ env.GITHUB_REF_SLUG }}
          yarn install
          yarn build
      - name: publish frontend for frontend master Web SDK
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: dlb-capi-showcase
          AWS_ACCESS_KEY_ID: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.VOXEET_AWS_REGION }}
          SOURCE_DIR: "frontend/dist"
          DEST_DIR: "${{ env.CLOUDFRONT_DESTINATION_PATH }}"
      - name: invalidate cloudfront distribution paths
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: E5A6FYRYTC8IV
          PATHS: "/${{ env.GITHUB_REF_SLUG }}/*"
          AWS_REGION: ${{ secrets.VOXEET_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}

  build_frontend_master_staging_docker_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VOXEET_AWS_REGION }}
      - name: Set NPM token when logging to CodeArtifact
        run: |
          CODEARTIFACT_TOKEN=$(/usr/local/bin/aws codeartifact get-authorization-token --duration-seconds 1800 --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_DOMAIN_OWNER }} --region ${{ secrets.AWS_REGION }} --output text --query authorizationToken)
          echo "::add-mask::$CODEARTIFACT_TOKEN"
          echo "CUSTOM_REGISTRY_TOKEN=${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_TOKEN }}$CODEARTIFACT_TOKEN" >> $GITHUB_ENV
      - name: Login to ECR
        id: ecr
        uses: elgohr/ecr-login-action@1.0.1
        with:
          access_key: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          region: ${{ secrets.AWS_REGION }}
      - name: build and publish frontend Docker container for master - staging Web SDK
        uses: elgohr/Publish-Docker-Github-Action@2.22
        env:
          WEB_SDK_DIST_TAG: master-staging
          UX_KIT_DIST_TAG: develop
          CUSTOM_REGISTRY_URL: ${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_URL }}
        with:
          name: voxeet-io-web
          dockerfile: Dockerfile
          workdir: frontend
          username: ${{ steps.ecr.outputs.username }}
          password: ${{ steps.ecr.outputs.password }}
          registry: ${{ steps.ecr.outputs.registry }}
          buildargs: CUSTOM_REGISTRY_URL,CUSTOM_REGISTRY_TOKEN,WEB_SDK_DIST_TAG
          buildoptions: "--pull"
          tags: "${{ env.WEB_SDK_DIST_TAG }}"

  build_frontend_master_staging:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    env:
      CLOUDFRONT_DESTINATION_PATH: staging
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.VOXEET_AWS_REGION }}
      - name: Set NPM token when logging to CodeArtifact
        run: |
          CODEARTIFACT_TOKEN=$(/usr/local/bin/aws codeartifact get-authorization-token --duration-seconds 1800 --domain ${{ secrets.CODEARTIFACT_DOMAIN }} --domain-owner ${{ secrets.CODEARTIFACT_DOMAIN_OWNER }} --region ${{ secrets.AWS_REGION }} --output text --query authorizationToken)
          echo "::add-mask::$CODEARTIFACT_TOKEN"
          echo "CUSTOM_REGISTRY_TOKEN=${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_TOKEN }}$CODEARTIFACT_TOKEN" >> $GITHUB_ENV
      - name: build frontend for develop - frontend master_staging Web SDK
        uses: actions/setup-node@v2
        env:
          WEB_SDK_DIST_TAG: master-staging
          UX_KIT_DIST_TAG: develop
          CUSTOM_REGISTRY_URL: ${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_URL }}
        with:
          node-version: "16.9.1"
      - run: |
          npm config set registry=${{ secrets.CODEARTIFACT_NPM_RELEASES_REPOSITORY_URL }}
          npm config set $CUSTOM_REGISTRY_TOKEN
          npm config set always-auth true
          yarn add -E @voxeet/voxeet-web-sdk@${{ env.WEB_SDK_DIST_TAG }}
          yarn install
          yarn build
      - name: publish frontend for frontend master_staging Web SDK
        uses: jakejarvis/s3-sync-action@master
        env:
          AWS_S3_BUCKET: dlb-capi-showcase
          AWS_ACCESS_KEY_ID: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.VOXEET_AWS_REGION }}
          SOURCE_DIR: "frontend/dist"
          DEST_DIR: "${{ env.CLOUDFRONT_DESTINATION_PATH }}"
      - name: invalidate cloudfront distribution paths
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: E5A6FYRYTC8IV
          PATHS: "/${{ env.WEB_SDK_DIST_TAG }}/*"
          AWS_REGION: ${{ secrets.VOXEET_AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.VOXEET_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.VOXEET_AWS_SECRET_ACCESS_KEY }}
